
In javascript,
Objects have properties,
and properties have attributes

JS has 3 ways of making objs :
1. var kk = {}
   kk.a = "a"
2. var kk = Object.create();
   kk.a = "a"
3. var kk = Acreator();
   // Acreator is a constructor fn which sets up prop a and
   // does other things like prototype etc.

In classical OOP, objects are collections of data and methods,
that operate on data.

You have a class statement that makes compound types.

Instead prototype oriented programming : no types/classes.
To achieve inheritance etc. just copy objects, share objects,
modify objects, use delegation etc.

But javascript, essentially being typeless, uses functions
as classes.(But don't yet forget that everything is an object)

The idea behind this:
When used inside a function, this refers to current object
(to the left of the dot that th function was called upon)
If dot notation is not used, it refers to global object

The relation between new and this:
new creates a brand new empty object , calls the function specified
with this set ot brand new empty object. whilst execution,
this brand new object is modified and this modified object
is returned to the calling site.
Functions designed to b called by new are called constructor functions
This constructor function doesn't return a value, its new that returns
the modified this.

Constructor function is used to set object's properties
and prepare object(using this btw)

Dilemma : Put functions inside object as members (many instances)
          or share functions (single instances)?

Behold the prototype :
Prototype is an """object""" shared by all
instances of class/Constructor function
you can get hold of prototype using :
Assuming p1 is instance of constructor function Person,
Object.getPrototypeOf(p1) or Person.prototype
but never p1.prototype ever.

Modifying prototype :
Assuming Person is name of constructor function,
Person.prototype.fullName = function() {
  return this.first + ' ' + this.last;
}

Usually best place to put a function for class like Person,
is the constructor function's prototype.

Prototype object is part of lookup chain, every instance
knows what its prototype object is(link setup during construction)

Powerfulness of prototype, modifying prototype at runtime means,
you can add extra methods/behaviour to existing objects at runtime

Note : prototype object comes into existence
(having a single property: constructor property set
to constructor function itlsef) as soon as constructor
function is declared, it does not need instances to be made,
it exists before any instances are made
e.g. Person.protoype exists as soon as Person function is made,
without even instantiating persons using any new Person

(Note: do not confuse between
constructor function (Functions starting with caps that create new ob)
vs
constructor property (a property present on the prototype object)
)

#+CAPTION: Summary image for prototypes
#+NAME:   fig:SED-HR4049
[[prototypeinfo.jpg]]


Wtf is constructor property then ???
It is property present on prototype object pointing to constructor
function itself.

It is generally a good idea to add more properties to prototype
instead of overwriting the prototype, because it will wipe off
useful autogenerated property like constructor

Note: There is no direct link between instance and constructor
function, The only link between them is the prototype

The nature of this relationship means that any disruption
between instance and prototype will also create disruption
between instance and the constructor property/constructor function
